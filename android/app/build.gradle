plugins {
    id "com.android.application"
    // START: FlutterFire Configuration
    id 'com.google.gms.google-services'
    // END: FlutterFire Configuration
    id "kotlin-android"
    // The Flutter Gradle Plugin must be applied after the Android and Kotlin Gradle plugins.
    id "dev.flutter.flutter-gradle-plugin"
}

def keystoreProperties = new Properties()
def keystorePropertiesFile = rootProject.file('key.properties')
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    namespace = "com.example.cloud_sense_webapp"
    compileSdk = flutter.compileSdkVersion
    ndkVersion = flutter.ndkVersion

    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }

    kotlinOptions {
        jvmTarget = JavaVersion.VERSION_1_8
    }

    defaultConfig {
        // TODO: Specify your own unique Application ID (https://developer.android.com/studio/build/application-id.html).
        applicationId "com.CloudSenseUnique"
        // You can update the following values to match your application needs.
        // For more information, see: https://flutter.dev/to/review-gradle-config.
        minSdk = 24
        targetSdk = 34
        versionCode = flutter.versionCode
        versionName = flutter.versionName
    }

    signingConfigs {
        release {
            keyAlias = keystoreProperties['keyAlias']
            keyPassword = keystoreProperties['keyPassword']
            storeFile = keystoreProperties['storeFile'] ? file(keystoreProperties['storeFile']) : null
            storePassword = keystoreProperties['storePassword']
        }
    }
    buildTypes {
        release {
            // TODO: Add your own signing config for the release build.
            // Signing with the debug keys for now,
            // so `flutter run --release` works.
            signingConfig = signingConfigs.debug
            signingConfig = signingConfigs.release
        }
    }
}
task deleteLogs {
    doLast {
        delete fileTree(dir: project.rootDir, includes: ['**/*.log'])
    }
}
preBuild.dependsOn(deleteLogs)

flutter {
    source = "../.."
}
dependencies {
    // Firebase Bill of Materials (BOM) for Firebase SDKs
    implementation platform('com.google.firebase:firebase-bom:33.3.0')  // Firebase BOM ensures consistent versions
    implementation "com.google.firebase:firebase-analytics"  // Firebase Analytics
    implementation "com.google.firebase:firebase-auth"  // Firebase Authentication
    implementation "com.google.firebase:firebase-messaging"  // Firebase Cloud Messaging
    implementation "com.google.firebase:firebase-inappmessaging-display"  // Firebase In-App Messaging
    
    // Android Support Libraries (if needed)
    implementation 'com.android.support:multidex:1.0.3'  // Enable Multidex support if necessary

    configurations.all {
        resolutionStrategy.eachDependency { details ->
            if (details.requested.group == 'org.jetbrains.kotlin') {
                details.useVersion '2.0.21'  // Use Kotlin version you prefer, ensuring compatibility
            }
        }
    }
}

apply plugin: 'com.google.gms.google-services'  // Apply the Google Services plugin to enable Firebase
